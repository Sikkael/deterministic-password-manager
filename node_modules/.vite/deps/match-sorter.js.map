{
  "version": 3,
  "sources": ["../../remove-accents/index.js", "../../@babel/runtime/helpers/esm/extends.js", "../../match-sorter/dist/match-sorter.esm.js"],
  "sourcesContent": ["var characterMap = {\r\n\t\"À\": \"A\",\r\n\t\"Á\": \"A\",\r\n\t\"Â\": \"A\",\r\n\t\"Ã\": \"A\",\r\n\t\"Ä\": \"A\",\r\n\t\"Å\": \"A\",\r\n\t\"Ấ\": \"A\",\r\n\t\"Ắ\": \"A\",\r\n\t\"Ẳ\": \"A\",\r\n\t\"Ẵ\": \"A\",\r\n\t\"Ặ\": \"A\",\r\n\t\"Æ\": \"AE\",\r\n\t\"Ầ\": \"A\",\r\n\t\"Ằ\": \"A\",\r\n\t\"Ȃ\": \"A\",\r\n\t\"Ç\": \"C\",\r\n\t\"Ḉ\": \"C\",\r\n\t\"È\": \"E\",\r\n\t\"É\": \"E\",\r\n\t\"Ê\": \"E\",\r\n\t\"Ë\": \"E\",\r\n\t\"Ế\": \"E\",\r\n\t\"Ḗ\": \"E\",\r\n\t\"Ề\": \"E\",\r\n\t\"Ḕ\": \"E\",\r\n\t\"Ḝ\": \"E\",\r\n\t\"Ȇ\": \"E\",\r\n\t\"Ì\": \"I\",\r\n\t\"Í\": \"I\",\r\n\t\"Î\": \"I\",\r\n\t\"Ï\": \"I\",\r\n\t\"Ḯ\": \"I\",\r\n\t\"Ȋ\": \"I\",\r\n\t\"Ð\": \"D\",\r\n\t\"Ñ\": \"N\",\r\n\t\"Ò\": \"O\",\r\n\t\"Ó\": \"O\",\r\n\t\"Ô\": \"O\",\r\n\t\"Õ\": \"O\",\r\n\t\"Ö\": \"O\",\r\n\t\"Ø\": \"O\",\r\n\t\"Ố\": \"O\",\r\n\t\"Ṍ\": \"O\",\r\n\t\"Ṓ\": \"O\",\r\n\t\"Ȏ\": \"O\",\r\n\t\"Ù\": \"U\",\r\n\t\"Ú\": \"U\",\r\n\t\"Û\": \"U\",\r\n\t\"Ü\": \"U\",\r\n\t\"Ý\": \"Y\",\r\n\t\"à\": \"a\",\r\n\t\"á\": \"a\",\r\n\t\"â\": \"a\",\r\n\t\"ã\": \"a\",\r\n\t\"ä\": \"a\",\r\n\t\"å\": \"a\",\r\n\t\"ấ\": \"a\",\r\n\t\"ắ\": \"a\",\r\n\t\"ẳ\": \"a\",\r\n\t\"ẵ\": \"a\",\r\n\t\"ặ\": \"a\",\r\n\t\"æ\": \"ae\",\r\n\t\"ầ\": \"a\",\r\n\t\"ằ\": \"a\",\r\n\t\"ȃ\": \"a\",\r\n\t\"ç\": \"c\",\r\n\t\"ḉ\": \"c\",\r\n\t\"è\": \"e\",\r\n\t\"é\": \"e\",\r\n\t\"ê\": \"e\",\r\n\t\"ë\": \"e\",\r\n\t\"ế\": \"e\",\r\n\t\"ḗ\": \"e\",\r\n\t\"ề\": \"e\",\r\n\t\"ḕ\": \"e\",\r\n\t\"ḝ\": \"e\",\r\n\t\"ȇ\": \"e\",\r\n\t\"ì\": \"i\",\r\n\t\"í\": \"i\",\r\n\t\"î\": \"i\",\r\n\t\"ï\": \"i\",\r\n\t\"ḯ\": \"i\",\r\n\t\"ȋ\": \"i\",\r\n\t\"ð\": \"d\",\r\n\t\"ñ\": \"n\",\r\n\t\"ò\": \"o\",\r\n\t\"ó\": \"o\",\r\n\t\"ô\": \"o\",\r\n\t\"õ\": \"o\",\r\n\t\"ö\": \"o\",\r\n\t\"ø\": \"o\",\r\n\t\"ố\": \"o\",\r\n\t\"ṍ\": \"o\",\r\n\t\"ṓ\": \"o\",\r\n\t\"ȏ\": \"o\",\r\n\t\"ù\": \"u\",\r\n\t\"ú\": \"u\",\r\n\t\"û\": \"u\",\r\n\t\"ü\": \"u\",\r\n\t\"ý\": \"y\",\r\n\t\"ÿ\": \"y\",\r\n\t\"Ā\": \"A\",\r\n\t\"ā\": \"a\",\r\n\t\"Ă\": \"A\",\r\n\t\"ă\": \"a\",\r\n\t\"Ą\": \"A\",\r\n\t\"ą\": \"a\",\r\n\t\"Ć\": \"C\",\r\n\t\"ć\": \"c\",\r\n\t\"Ĉ\": \"C\",\r\n\t\"ĉ\": \"c\",\r\n\t\"Ċ\": \"C\",\r\n\t\"ċ\": \"c\",\r\n\t\"Č\": \"C\",\r\n\t\"č\": \"c\",\r\n\t\"C̆\": \"C\",\r\n\t\"c̆\": \"c\",\r\n\t\"Ď\": \"D\",\r\n\t\"ď\": \"d\",\r\n\t\"Đ\": \"D\",\r\n\t\"đ\": \"d\",\r\n\t\"Ē\": \"E\",\r\n\t\"ē\": \"e\",\r\n\t\"Ĕ\": \"E\",\r\n\t\"ĕ\": \"e\",\r\n\t\"Ė\": \"E\",\r\n\t\"ė\": \"e\",\r\n\t\"Ę\": \"E\",\r\n\t\"ę\": \"e\",\r\n\t\"Ě\": \"E\",\r\n\t\"ě\": \"e\",\r\n\t\"Ĝ\": \"G\",\r\n\t\"Ǵ\": \"G\",\r\n\t\"ĝ\": \"g\",\r\n\t\"ǵ\": \"g\",\r\n\t\"Ğ\": \"G\",\r\n\t\"ğ\": \"g\",\r\n\t\"Ġ\": \"G\",\r\n\t\"ġ\": \"g\",\r\n\t\"Ģ\": \"G\",\r\n\t\"ģ\": \"g\",\r\n\t\"Ĥ\": \"H\",\r\n\t\"ĥ\": \"h\",\r\n\t\"Ħ\": \"H\",\r\n\t\"ħ\": \"h\",\r\n\t\"Ḫ\": \"H\",\r\n\t\"ḫ\": \"h\",\r\n\t\"Ĩ\": \"I\",\r\n\t\"ĩ\": \"i\",\r\n\t\"Ī\": \"I\",\r\n\t\"ī\": \"i\",\r\n\t\"Ĭ\": \"I\",\r\n\t\"ĭ\": \"i\",\r\n\t\"Į\": \"I\",\r\n\t\"į\": \"i\",\r\n\t\"İ\": \"I\",\r\n\t\"ı\": \"i\",\r\n\t\"Ĳ\": \"IJ\",\r\n\t\"ĳ\": \"ij\",\r\n\t\"Ĵ\": \"J\",\r\n\t\"ĵ\": \"j\",\r\n\t\"Ķ\": \"K\",\r\n\t\"ķ\": \"k\",\r\n\t\"Ḱ\": \"K\",\r\n\t\"ḱ\": \"k\",\r\n\t\"K̆\": \"K\",\r\n\t\"k̆\": \"k\",\r\n\t\"Ĺ\": \"L\",\r\n\t\"ĺ\": \"l\",\r\n\t\"Ļ\": \"L\",\r\n\t\"ļ\": \"l\",\r\n\t\"Ľ\": \"L\",\r\n\t\"ľ\": \"l\",\r\n\t\"Ŀ\": \"L\",\r\n\t\"ŀ\": \"l\",\r\n\t\"Ł\": \"l\",\r\n\t\"ł\": \"l\",\r\n\t\"Ḿ\": \"M\",\r\n\t\"ḿ\": \"m\",\r\n\t\"M̆\": \"M\",\r\n\t\"m̆\": \"m\",\r\n\t\"Ń\": \"N\",\r\n\t\"ń\": \"n\",\r\n\t\"Ņ\": \"N\",\r\n\t\"ņ\": \"n\",\r\n\t\"Ň\": \"N\",\r\n\t\"ň\": \"n\",\r\n\t\"ŉ\": \"n\",\r\n\t\"N̆\": \"N\",\r\n\t\"n̆\": \"n\",\r\n\t\"Ō\": \"O\",\r\n\t\"ō\": \"o\",\r\n\t\"Ŏ\": \"O\",\r\n\t\"ŏ\": \"o\",\r\n\t\"Ő\": \"O\",\r\n\t\"ő\": \"o\",\r\n\t\"Œ\": \"OE\",\r\n\t\"œ\": \"oe\",\r\n\t\"P̆\": \"P\",\r\n\t\"p̆\": \"p\",\r\n\t\"Ŕ\": \"R\",\r\n\t\"ŕ\": \"r\",\r\n\t\"Ŗ\": \"R\",\r\n\t\"ŗ\": \"r\",\r\n\t\"Ř\": \"R\",\r\n\t\"ř\": \"r\",\r\n\t\"R̆\": \"R\",\r\n\t\"r̆\": \"r\",\r\n\t\"Ȓ\": \"R\",\r\n\t\"ȓ\": \"r\",\r\n\t\"Ś\": \"S\",\r\n\t\"ś\": \"s\",\r\n\t\"Ŝ\": \"S\",\r\n\t\"ŝ\": \"s\",\r\n\t\"Ş\": \"S\",\r\n\t\"Ș\": \"S\",\r\n\t\"ș\": \"s\",\r\n\t\"ş\": \"s\",\r\n\t\"Š\": \"S\",\r\n\t\"š\": \"s\",\r\n\t\"Ţ\": \"T\",\r\n\t\"ţ\": \"t\",\r\n\t\"ț\": \"t\",\r\n\t\"Ț\": \"T\",\r\n\t\"Ť\": \"T\",\r\n\t\"ť\": \"t\",\r\n\t\"Ŧ\": \"T\",\r\n\t\"ŧ\": \"t\",\r\n\t\"T̆\": \"T\",\r\n\t\"t̆\": \"t\",\r\n\t\"Ũ\": \"U\",\r\n\t\"ũ\": \"u\",\r\n\t\"Ū\": \"U\",\r\n\t\"ū\": \"u\",\r\n\t\"Ŭ\": \"U\",\r\n\t\"ŭ\": \"u\",\r\n\t\"Ů\": \"U\",\r\n\t\"ů\": \"u\",\r\n\t\"Ű\": \"U\",\r\n\t\"ű\": \"u\",\r\n\t\"Ų\": \"U\",\r\n\t\"ų\": \"u\",\r\n\t\"Ȗ\": \"U\",\r\n\t\"ȗ\": \"u\",\r\n\t\"V̆\": \"V\",\r\n\t\"v̆\": \"v\",\r\n\t\"Ŵ\": \"W\",\r\n\t\"ŵ\": \"w\",\r\n\t\"Ẃ\": \"W\",\r\n\t\"ẃ\": \"w\",\r\n\t\"X̆\": \"X\",\r\n\t\"x̆\": \"x\",\r\n\t\"Ŷ\": \"Y\",\r\n\t\"ŷ\": \"y\",\r\n\t\"Ÿ\": \"Y\",\r\n\t\"Y̆\": \"Y\",\r\n\t\"y̆\": \"y\",\r\n\t\"Ź\": \"Z\",\r\n\t\"ź\": \"z\",\r\n\t\"Ż\": \"Z\",\r\n\t\"ż\": \"z\",\r\n\t\"Ž\": \"Z\",\r\n\t\"ž\": \"z\",\r\n\t\"ſ\": \"s\",\r\n\t\"ƒ\": \"f\",\r\n\t\"Ơ\": \"O\",\r\n\t\"ơ\": \"o\",\r\n\t\"Ư\": \"U\",\r\n\t\"ư\": \"u\",\r\n\t\"Ǎ\": \"A\",\r\n\t\"ǎ\": \"a\",\r\n\t\"Ǐ\": \"I\",\r\n\t\"ǐ\": \"i\",\r\n\t\"Ǒ\": \"O\",\r\n\t\"ǒ\": \"o\",\r\n\t\"Ǔ\": \"U\",\r\n\t\"ǔ\": \"u\",\r\n\t\"Ǖ\": \"U\",\r\n\t\"ǖ\": \"u\",\r\n\t\"Ǘ\": \"U\",\r\n\t\"ǘ\": \"u\",\r\n\t\"Ǚ\": \"U\",\r\n\t\"ǚ\": \"u\",\r\n\t\"Ǜ\": \"U\",\r\n\t\"ǜ\": \"u\",\r\n\t\"Ứ\": \"U\",\r\n\t\"ứ\": \"u\",\r\n\t\"Ṹ\": \"U\",\r\n\t\"ṹ\": \"u\",\r\n\t\"Ǻ\": \"A\",\r\n\t\"ǻ\": \"a\",\r\n\t\"Ǽ\": \"AE\",\r\n\t\"ǽ\": \"ae\",\r\n\t\"Ǿ\": \"O\",\r\n\t\"ǿ\": \"o\",\r\n\t\"Þ\": \"TH\",\r\n\t\"þ\": \"th\",\r\n\t\"Ṕ\": \"P\",\r\n\t\"ṕ\": \"p\",\r\n\t\"Ṥ\": \"S\",\r\n\t\"ṥ\": \"s\",\r\n\t\"X́\": \"X\",\r\n\t\"x́\": \"x\",\r\n\t\"Ѓ\": \"Г\",\r\n\t\"ѓ\": \"г\",\r\n\t\"Ќ\": \"К\",\r\n\t\"ќ\": \"к\",\r\n\t\"A̋\": \"A\",\r\n\t\"a̋\": \"a\",\r\n\t\"E̋\": \"E\",\r\n\t\"e̋\": \"e\",\r\n\t\"I̋\": \"I\",\r\n\t\"i̋\": \"i\",\r\n\t\"Ǹ\": \"N\",\r\n\t\"ǹ\": \"n\",\r\n\t\"Ồ\": \"O\",\r\n\t\"ồ\": \"o\",\r\n\t\"Ṑ\": \"O\",\r\n\t\"ṑ\": \"o\",\r\n\t\"Ừ\": \"U\",\r\n\t\"ừ\": \"u\",\r\n\t\"Ẁ\": \"W\",\r\n\t\"ẁ\": \"w\",\r\n\t\"Ỳ\": \"Y\",\r\n\t\"ỳ\": \"y\",\r\n\t\"Ȁ\": \"A\",\r\n\t\"ȁ\": \"a\",\r\n\t\"Ȅ\": \"E\",\r\n\t\"ȅ\": \"e\",\r\n\t\"Ȉ\": \"I\",\r\n\t\"ȉ\": \"i\",\r\n\t\"Ȍ\": \"O\",\r\n\t\"ȍ\": \"o\",\r\n\t\"Ȑ\": \"R\",\r\n\t\"ȑ\": \"r\",\r\n\t\"Ȕ\": \"U\",\r\n\t\"ȕ\": \"u\",\r\n\t\"B̌\": \"B\",\r\n\t\"b̌\": \"b\",\r\n\t\"Č̣\": \"C\",\r\n\t\"č̣\": \"c\",\r\n\t\"Ê̌\": \"E\",\r\n\t\"ê̌\": \"e\",\r\n\t\"F̌\": \"F\",\r\n\t\"f̌\": \"f\",\r\n\t\"Ǧ\": \"G\",\r\n\t\"ǧ\": \"g\",\r\n\t\"Ȟ\": \"H\",\r\n\t\"ȟ\": \"h\",\r\n\t\"J̌\": \"J\",\r\n\t\"ǰ\": \"j\",\r\n\t\"Ǩ\": \"K\",\r\n\t\"ǩ\": \"k\",\r\n\t\"M̌\": \"M\",\r\n\t\"m̌\": \"m\",\r\n\t\"P̌\": \"P\",\r\n\t\"p̌\": \"p\",\r\n\t\"Q̌\": \"Q\",\r\n\t\"q̌\": \"q\",\r\n\t\"Ř̩\": \"R\",\r\n\t\"ř̩\": \"r\",\r\n\t\"Ṧ\": \"S\",\r\n\t\"ṧ\": \"s\",\r\n\t\"V̌\": \"V\",\r\n\t\"v̌\": \"v\",\r\n\t\"W̌\": \"W\",\r\n\t\"w̌\": \"w\",\r\n\t\"X̌\": \"X\",\r\n\t\"x̌\": \"x\",\r\n\t\"Y̌\": \"Y\",\r\n\t\"y̌\": \"y\",\r\n\t\"A̧\": \"A\",\r\n\t\"a̧\": \"a\",\r\n\t\"B̧\": \"B\",\r\n\t\"b̧\": \"b\",\r\n\t\"Ḑ\": \"D\",\r\n\t\"ḑ\": \"d\",\r\n\t\"Ȩ\": \"E\",\r\n\t\"ȩ\": \"e\",\r\n\t\"Ɛ̧\": \"E\",\r\n\t\"ɛ̧\": \"e\",\r\n\t\"Ḩ\": \"H\",\r\n\t\"ḩ\": \"h\",\r\n\t\"I̧\": \"I\",\r\n\t\"i̧\": \"i\",\r\n\t\"Ɨ̧\": \"I\",\r\n\t\"ɨ̧\": \"i\",\r\n\t\"M̧\": \"M\",\r\n\t\"m̧\": \"m\",\r\n\t\"O̧\": \"O\",\r\n\t\"o̧\": \"o\",\r\n\t\"Q̧\": \"Q\",\r\n\t\"q̧\": \"q\",\r\n\t\"U̧\": \"U\",\r\n\t\"u̧\": \"u\",\r\n\t\"X̧\": \"X\",\r\n\t\"x̧\": \"x\",\r\n\t\"Z̧\": \"Z\",\r\n\t\"z̧\": \"z\",\r\n};\r\n\r\nvar chars = Object.keys(characterMap).join('|');\r\nvar allAccents = new RegExp(chars, 'g');\r\nvar firstAccent = new RegExp(chars, '');\r\n\r\nvar removeAccents = function(string) {\t\r\n\treturn string.replace(allAccents, function(match) {\r\n\t\treturn characterMap[match];\r\n\t});\r\n};\r\n\r\nvar hasAccents = function(string) {\r\n\treturn !!string.match(firstAccent);\r\n};\r\n\r\nmodule.exports = removeAccents;\r\nmodule.exports.has = hasAccents;\r\nmodule.exports.remove = removeAccents;\r\n", "export default function _extends() {\r\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\r\n    for (var i = 1; i < arguments.length; i++) {\r\n      var source = arguments[i];\r\n      for (var key in source) {\r\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\r\n          target[key] = source[key];\r\n        }\r\n      }\r\n    }\r\n    return target;\r\n  };\r\n  return _extends.apply(this, arguments);\r\n}", "import _extends from '@babel/runtime/helpers/esm/extends';\r\nimport removeAccents from 'remove-accents';\r\n\r\nvar rankings = {\r\n  CASE_SENSITIVE_EQUAL: 7,\r\n  EQUAL: 6,\r\n  STARTS_WITH: 5,\r\n  WORD_STARTS_WITH: 4,\r\n  CONTAINS: 3,\r\n  ACRONYM: 2,\r\n  MATCHES: 1,\r\n  NO_MATCH: 0\r\n};\r\nmatchSorter.rankings = rankings;\r\n\r\nvar defaultBaseSortFn = function defaultBaseSortFn(a, b) {\r\n  return String(a.rankedValue).localeCompare(String(b.rankedValue));\r\n};\r\n/**\r\n * Takes an array of items and a value and returns a new array with the items that match the given value\r\n * @param {Array} items - the items to sort\r\n * @param {String} value - the value to use for ranking\r\n * @param {Object} options - Some options to configure the sorter\r\n * @return {Array} - the new sorted array\r\n */\r\n\r\n\r\nfunction matchSorter(items, value, options) {\r\n  if (options === void 0) {\r\n    options = {};\r\n  }\r\n\r\n  var _options = options,\r\n      keys = _options.keys,\r\n      _options$threshold = _options.threshold,\r\n      threshold = _options$threshold === void 0 ? rankings.MATCHES : _options$threshold,\r\n      _options$baseSort = _options.baseSort,\r\n      baseSort = _options$baseSort === void 0 ? defaultBaseSortFn : _options$baseSort,\r\n      _options$sorter = _options.sorter,\r\n      sorter = _options$sorter === void 0 ? function (matchedItems) {\r\n    return matchedItems.sort(function (a, b) {\r\n      return sortRankedValues(a, b, baseSort);\r\n    });\r\n  } : _options$sorter;\r\n  var matchedItems = items.reduce(reduceItemsToRanked, []);\r\n  return sorter(matchedItems).map(function (_ref) {\r\n    var item = _ref.item;\r\n    return item;\r\n  });\r\n\r\n  function reduceItemsToRanked(matches, item, index) {\r\n    var rankingInfo = getHighestRanking(item, keys, value, options);\r\n    var rank = rankingInfo.rank,\r\n        _rankingInfo$keyThres = rankingInfo.keyThreshold,\r\n        keyThreshold = _rankingInfo$keyThres === void 0 ? threshold : _rankingInfo$keyThres;\r\n\r\n    if (rank >= keyThreshold) {\r\n      matches.push(_extends({}, rankingInfo, {\r\n        item: item,\r\n        index: index\r\n      }));\r\n    }\r\n\r\n    return matches;\r\n  }\r\n}\r\n/**\r\n * Gets the highest ranking for value for the given item based on its values for the given keys\r\n * @param {*} item - the item to rank\r\n * @param {Array} keys - the keys to get values from the item for the ranking\r\n * @param {String} value - the value to rank against\r\n * @param {Object} options - options to control the ranking\r\n * @return {{rank: Number, keyIndex: Number, keyThreshold: Number}} - the highest ranking\r\n */\r\n\r\n\r\nfunction getHighestRanking(item, keys, value, options) {\r\n  if (!keys) {\r\n    // if keys is not specified, then we assume the item given is ready to be matched\r\n    var stringItem = item;\r\n    return {\r\n      // ends up being duplicate of 'item' in matches but consistent\r\n      rankedValue: stringItem,\r\n      rank: getMatchRanking(stringItem, value, options),\r\n      keyIndex: -1,\r\n      keyThreshold: options.threshold\r\n    };\r\n  }\r\n\r\n  var valuesToRank = getAllValuesToRank(item, keys);\r\n  return valuesToRank.reduce(function (_ref2, _ref3, i) {\r\n    var rank = _ref2.rank,\r\n        rankedValue = _ref2.rankedValue,\r\n        keyIndex = _ref2.keyIndex,\r\n        keyThreshold = _ref2.keyThreshold;\r\n    var itemValue = _ref3.itemValue,\r\n        attributes = _ref3.attributes;\r\n    var newRank = getMatchRanking(itemValue, value, options);\r\n    var newRankedValue = rankedValue;\r\n    var minRanking = attributes.minRanking,\r\n        maxRanking = attributes.maxRanking,\r\n        threshold = attributes.threshold;\r\n\r\n    if (newRank < minRanking && newRank >= rankings.MATCHES) {\r\n      newRank = minRanking;\r\n    } else if (newRank > maxRanking) {\r\n      newRank = maxRanking;\r\n    }\r\n\r\n    if (newRank > rank) {\r\n      rank = newRank;\r\n      keyIndex = i;\r\n      keyThreshold = threshold;\r\n      newRankedValue = itemValue;\r\n    }\r\n\r\n    return {\r\n      rankedValue: newRankedValue,\r\n      rank: rank,\r\n      keyIndex: keyIndex,\r\n      keyThreshold: keyThreshold\r\n    };\r\n  }, {\r\n    rankedValue: item,\r\n    rank: rankings.NO_MATCH,\r\n    keyIndex: -1,\r\n    keyThreshold: options.threshold\r\n  });\r\n}\r\n/**\r\n * Gives a rankings score based on how well the two strings match.\r\n * @param {String} testString - the string to test against\r\n * @param {String} stringToRank - the string to rank\r\n * @param {Object} options - options for the match (like keepDiacritics for comparison)\r\n * @returns {Number} the ranking for how well stringToRank matches testString\r\n */\r\n\r\n\r\nfunction getMatchRanking(testString, stringToRank, options) {\r\n  testString = prepareValueForComparison(testString, options);\r\n  stringToRank = prepareValueForComparison(stringToRank, options); // too long\r\n\r\n  if (stringToRank.length > testString.length) {\r\n    return rankings.NO_MATCH;\r\n  } // case sensitive equals\r\n\r\n\r\n  if (testString === stringToRank) {\r\n    return rankings.CASE_SENSITIVE_EQUAL;\r\n  } // Lower casing before further comparison\r\n\r\n\r\n  testString = testString.toLowerCase();\r\n  stringToRank = stringToRank.toLowerCase(); // case insensitive equals\r\n\r\n  if (testString === stringToRank) {\r\n    return rankings.EQUAL;\r\n  } // starts with\r\n\r\n\r\n  if (testString.startsWith(stringToRank)) {\r\n    return rankings.STARTS_WITH;\r\n  } // word starts with\r\n\r\n\r\n  if (testString.includes(\" \" + stringToRank)) {\r\n    return rankings.WORD_STARTS_WITH;\r\n  } // contains\r\n\r\n\r\n  if (testString.includes(stringToRank)) {\r\n    return rankings.CONTAINS;\r\n  } else if (stringToRank.length === 1) {\r\n    // If the only character in the given stringToRank\r\n    //   isn't even contained in the testString, then\r\n    //   it's definitely not a match.\r\n    return rankings.NO_MATCH;\r\n  } // acronym\r\n\r\n\r\n  if (getAcronym(testString).includes(stringToRank)) {\r\n    return rankings.ACRONYM;\r\n  } // will return a number between rankings.MATCHES and\r\n  // rankings.MATCHES + 1 depending  on how close of a match it is.\r\n\r\n\r\n  return getClosenessRanking(testString, stringToRank);\r\n}\r\n/**\r\n * Generates an acronym for a string.\r\n *\r\n * @param {String} string the string for which to produce the acronym\r\n * @returns {String} the acronym\r\n */\r\n\r\n\r\nfunction getAcronym(string) {\r\n  var acronym = '';\r\n  var wordsInString = string.split(' ');\r\n  wordsInString.forEach(function (wordInString) {\r\n    var splitByHyphenWords = wordInString.split('-');\r\n    splitByHyphenWords.forEach(function (splitByHyphenWord) {\r\n      acronym += splitByHyphenWord.substr(0, 1);\r\n    });\r\n  });\r\n  return acronym;\r\n}\r\n/**\r\n * Returns a score based on how spread apart the\r\n * characters from the stringToRank are within the testString.\r\n * A number close to rankings.MATCHES represents a loose match. A number close\r\n * to rankings.MATCHES + 1 represents a tighter match.\r\n * @param {String} testString - the string to test against\r\n * @param {String} stringToRank - the string to rank\r\n * @returns {Number} the number between rankings.MATCHES and\r\n * rankings.MATCHES + 1 for how well stringToRank matches testString\r\n */\r\n\r\n\r\nfunction getClosenessRanking(testString, stringToRank) {\r\n  var matchingInOrderCharCount = 0;\r\n  var charNumber = 0;\r\n\r\n  function findMatchingCharacter(matchChar, string, index) {\r\n    for (var j = index, J = string.length; j < J; j++) {\r\n      var stringChar = string[j];\r\n\r\n      if (stringChar === matchChar) {\r\n        matchingInOrderCharCount += 1;\r\n        return j + 1;\r\n      }\r\n    }\r\n\r\n    return -1;\r\n  }\r\n\r\n  function getRanking(spread) {\r\n    var spreadPercentage = 1 / spread;\r\n    var inOrderPercentage = matchingInOrderCharCount / stringToRank.length;\r\n    var ranking = rankings.MATCHES + inOrderPercentage * spreadPercentage;\r\n    return ranking;\r\n  }\r\n\r\n  var firstIndex = findMatchingCharacter(stringToRank[0], testString, 0);\r\n\r\n  if (firstIndex < 0) {\r\n    return rankings.NO_MATCH;\r\n  }\r\n\r\n  charNumber = firstIndex;\r\n\r\n  for (var i = 1, I = stringToRank.length; i < I; i++) {\r\n    var matchChar = stringToRank[i];\r\n    charNumber = findMatchingCharacter(matchChar, testString, charNumber);\r\n    var found = charNumber > -1;\r\n\r\n    if (!found) {\r\n      return rankings.NO_MATCH;\r\n    }\r\n  }\r\n\r\n  var spread = charNumber - firstIndex;\r\n  return getRanking(spread);\r\n}\r\n/**\r\n * Sorts items that have a rank, index, and keyIndex\r\n * @param {Object} a - the first item to sort\r\n * @param {Object} b - the second item to sort\r\n * @return {Number} -1 if a should come first, 1 if b should come first, 0 if equal\r\n */\r\n\r\n\r\nfunction sortRankedValues(a, b, baseSort) {\r\n  var aFirst = -1;\r\n  var bFirst = 1;\r\n  var aRank = a.rank,\r\n      aKeyIndex = a.keyIndex;\r\n  var bRank = b.rank,\r\n      bKeyIndex = b.keyIndex;\r\n  var same = aRank === bRank;\r\n\r\n  if (same) {\r\n    if (aKeyIndex === bKeyIndex) {\r\n      // use the base sort function as a tie-breaker\r\n      return baseSort(a, b);\r\n    } else {\r\n      return aKeyIndex < bKeyIndex ? aFirst : bFirst;\r\n    }\r\n  } else {\r\n    return aRank > bRank ? aFirst : bFirst;\r\n  }\r\n}\r\n/**\r\n * Prepares value for comparison by stringifying it, removing diacritics (if specified)\r\n * @param {String} value - the value to clean\r\n * @param {Object} options - {keepDiacritics: whether to remove diacritics}\r\n * @return {String} the prepared value\r\n */\r\n\r\n\r\nfunction prepareValueForComparison(value, _ref4) {\r\n  var keepDiacritics = _ref4.keepDiacritics;\r\n  // value might not actually be a string at this point (we don't get to choose)\r\n  // so part of preparing the value for comparison is ensure that it is a string\r\n  value = \"\" + value; // toString\r\n\r\n  if (!keepDiacritics) {\r\n    value = removeAccents(value);\r\n  }\r\n\r\n  return value;\r\n}\r\n/**\r\n * Gets value for key in item at arbitrarily nested keypath\r\n * @param {Object} item - the item\r\n * @param {Object|Function} key - the potentially nested keypath or property callback\r\n * @return {Array} - an array containing the value(s) at the nested keypath\r\n */\r\n\r\n\r\nfunction getItemValues(item, key) {\r\n  if (typeof key === 'object') {\r\n    key = key.key;\r\n  }\r\n\r\n  var value;\r\n\r\n  if (typeof key === 'function') {\r\n    value = key(item);\r\n  } else if (item == null) {\r\n    value = null;\r\n  } else if (Object.hasOwnProperty.call(item, key)) {\r\n    value = item[key];\r\n  } else if (key.includes('.')) {\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\r\n    return getNestedValues(key, item);\r\n  } else {\r\n    value = null;\r\n  } // because `value` can also be undefined\r\n\r\n\r\n  if (value == null) {\r\n    return [];\r\n  }\r\n\r\n  if (Array.isArray(value)) {\r\n    return value;\r\n  }\r\n\r\n  return [String(value)];\r\n}\r\n/**\r\n * Given path: \"foo.bar.baz\"\r\n * And item: {foo: {bar: {baz: 'buzz'}}}\r\n *   -> 'buzz'\r\n * @param path a dot-separated set of keys\r\n * @param item the item to get the value from\r\n */\r\n\r\n\r\nfunction getNestedValues(path, item) {\r\n  var keys = path.split('.');\r\n  var values = [item];\r\n\r\n  for (var i = 0, I = keys.length; i < I; i++) {\r\n    var nestedKey = keys[i];\r\n    var nestedValues = [];\r\n\r\n    for (var j = 0, J = values.length; j < J; j++) {\r\n      var nestedItem = values[j];\r\n      if (nestedItem == null) continue;\r\n\r\n      if (Object.hasOwnProperty.call(nestedItem, nestedKey)) {\r\n        var nestedValue = nestedItem[nestedKey];\r\n\r\n        if (nestedValue != null) {\r\n          nestedValues.push(nestedValue);\r\n        }\r\n      } else if (nestedKey === '*') {\r\n        // ensure that values is an array\r\n        nestedValues = nestedValues.concat(nestedItem);\r\n      }\r\n    }\r\n\r\n    values = nestedValues;\r\n  }\r\n\r\n  if (Array.isArray(values[0])) {\r\n    // keep allowing the implicit wildcard for an array of strings at the end of\r\n    // the path; don't use `.flat()` because that's not available in node.js v10\r\n    var result = [];\r\n    return result.concat.apply(result, values);\r\n  } // Based on our logic it should be an array of strings by now...\r\n  // assuming the user's path terminated in strings\r\n\r\n\r\n  return values;\r\n}\r\n/**\r\n * Gets all the values for the given keys in the given item and returns an array of those values\r\n * @param item - the item from which the values will be retrieved\r\n * @param keys - the keys to use to retrieve the values\r\n * @return objects with {itemValue, attributes}\r\n */\r\n\r\n\r\nfunction getAllValuesToRank(item, keys) {\r\n  var allValues = [];\r\n\r\n  for (var j = 0, J = keys.length; j < J; j++) {\r\n    var key = keys[j];\r\n    var attributes = getKeyAttributes(key);\r\n    var itemValues = getItemValues(item, key);\r\n\r\n    for (var i = 0, I = itemValues.length; i < I; i++) {\r\n      allValues.push({\r\n        itemValue: itemValues[i],\r\n        attributes: attributes\r\n      });\r\n    }\r\n  }\r\n\r\n  return allValues;\r\n}\r\n\r\nvar defaultKeyAttributes = {\r\n  maxRanking: Infinity,\r\n  minRanking: -Infinity\r\n};\r\n/**\r\n * Gets all the attributes for the given key\r\n * @param key - the key from which the attributes will be retrieved\r\n * @return object containing the key's attributes\r\n */\r\n\r\nfunction getKeyAttributes(key) {\r\n  if (typeof key === 'string') {\r\n    return defaultKeyAttributes;\r\n  }\r\n\r\n  return _extends({}, defaultKeyAttributes, key);\r\n}\r\n/*\r\neslint\r\n  no-continue: \"off\",\r\n*/\r\n\r\nexport { defaultBaseSortFn, matchSorter, rankings };\r\n"],
  "mappings": "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",
  "names": ["removeAccents", "defaultBaseSortFn", "matchedItems", "matchChar", "spread", "removeAccents"]
}
